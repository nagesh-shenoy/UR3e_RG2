// Generated by gencpp from file ur_control/RG2Response.msg
// DO NOT EDIT!


#ifndef UR_CONTROL_MESSAGE_RG2RESPONSE_H
#define UR_CONTROL_MESSAGE_RG2RESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>

namespace ur_control
{
template <class ContainerAllocator>
struct RG2Response_
{
  typedef RG2Response_<ContainerAllocator> Type;

  RG2Response_()
    : current_width()  {
    }
  RG2Response_(const ContainerAllocator& _alloc)
    : current_width(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _current_width_type;
  _current_width_type current_width;





  typedef boost::shared_ptr< ::ur_control::RG2Response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_control::RG2Response_<ContainerAllocator> const> ConstPtr;

}; // struct RG2Response_

typedef ::ur_control::RG2Response_<std::allocator<void> > RG2Response;

typedef boost::shared_ptr< ::ur_control::RG2Response > RG2ResponsePtr;
typedef boost::shared_ptr< ::ur_control::RG2Response const> RG2ResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_control::RG2Response_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_control::RG2Response_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur_control::RG2Response_<ContainerAllocator1> & lhs, const ::ur_control::RG2Response_<ContainerAllocator2> & rhs)
{
  return lhs.current_width == rhs.current_width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur_control::RG2Response_<ContainerAllocator1> & lhs, const ::ur_control::RG2Response_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ur_control::RG2Response_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_control::RG2Response_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_control::RG2Response_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_control::RG2Response_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_control::RG2Response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_control::RG2Response_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_control::RG2Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc6487a02ad2aa61e0009f990c2fb8e1";
  }

  static const char* value(const ::ur_control::RG2Response_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc6487a02ad2aa61ULL;
  static const uint64_t static_value2 = 0xe0009f990c2fb8e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_control::RG2Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_control/RG2Response";
  }

  static const char* value(const ::ur_control::RG2Response_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_control::RG2Response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 current_width\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::ur_control::RG2Response_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_control::RG2Response_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RG2Response_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_control::RG2Response_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_control::RG2Response_<ContainerAllocator>& v)
  {
    s << indent << "current_width: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.current_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_CONTROL_MESSAGE_RG2RESPONSE_H
