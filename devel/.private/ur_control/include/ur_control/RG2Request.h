// Generated by gencpp from file ur_control/RG2Request.msg
// DO NOT EDIT!


#ifndef UR_CONTROL_MESSAGE_RG2REQUEST_H
#define UR_CONTROL_MESSAGE_RG2REQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>

namespace ur_control
{
template <class ContainerAllocator>
struct RG2Request_
{
  typedef RG2Request_<ContainerAllocator> Type;

  RG2Request_()
    : target_width()  {
    }
  RG2Request_(const ContainerAllocator& _alloc)
    : target_width(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _target_width_type;
  _target_width_type target_width;





  typedef boost::shared_ptr< ::ur_control::RG2Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_control::RG2Request_<ContainerAllocator> const> ConstPtr;

}; // struct RG2Request_

typedef ::ur_control::RG2Request_<std::allocator<void> > RG2Request;

typedef boost::shared_ptr< ::ur_control::RG2Request > RG2RequestPtr;
typedef boost::shared_ptr< ::ur_control::RG2Request const> RG2RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_control::RG2Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_control::RG2Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur_control::RG2Request_<ContainerAllocator1> & lhs, const ::ur_control::RG2Request_<ContainerAllocator2> & rhs)
{
  return lhs.target_width == rhs.target_width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur_control::RG2Request_<ContainerAllocator1> & lhs, const ::ur_control::RG2Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ur_control::RG2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_control::RG2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_control::RG2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_control::RG2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_control::RG2Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_control::RG2Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_control::RG2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c47b5151a9d2cd1addabbbc4d278908";
  }

  static const char* value(const ::ur_control::RG2Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c47b5151a9d2cd1ULL;
  static const uint64_t static_value2 = 0xaddabbbc4d278908ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_control::RG2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_control/RG2Request";
  }

  static const char* value(const ::ur_control::RG2Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_control::RG2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#std_msgs/Bool open_close\n"
"std_msgs/Float64 target_width\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::ur_control::RG2Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_control::RG2Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RG2Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_control::RG2Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_control::RG2Request_<ContainerAllocator>& v)
  {
    s << indent << "target_width: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.target_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_CONTROL_MESSAGE_RG2REQUEST_H
